# Explicitly setting the "read" and "text" modes
fobj = open('qan_stk_prc.csv', mode='rt')
# Using the default "text" mode
fobj = open('qan_stk_prc.csv', mode='r')
# Using the default "read" and "text" modes
fobj = open('qan_stk_prc.csv')


import os
import toolkit_config as cfg
SRCFILE = os.path.join(cfg.DATADIR, 'qan_prc_2020.csv')
DSTFILE = os.path.join(cfg.DATADIR, 'new_file.txt')



# Opening the `SRCFILE` and reading its contents
# This will open the file located at `SRCFILE` and return a handler (file
# object):
fobj = open(SRCFILE, mode='r')



# We can get the entire content of the file by calling the method `.read()`,
# without parameters:
cnts = fobj.read()
# The variable `cnts` will be a string containing the full contents of the
# file. This will print the first 20 characters:
print(cnts[:20])
# Output:
# Date,Open,High,Low,C



# Check if the file is closed
print(fobj.closed) # --> False
# Close the file
fobj.close()
print(fobj.closed) # --> True



data = ['a', 'b', 'c'] # This is the data
my_iter = iter(data) # Creates an iterator over the object `data`
next(my_iter) # Current position is 0 --> Fetch data[0] --> move to position 1
'a'
next(my_iter) # Current position is 1 --> Fetch data[1] --> move to position 2
'b'
next(my_iter) # Current position is 2 --> Fetch data[2] --> stop
'c'



# Comparing different approaches to get the contents
# Remember that we previously closed the file so we need to open it again
fobj = open(SRCFILE, mode='r')
# Contents using `.read`
cnts = fobj.read()
print(f"First 20 characters in cnts: '{cnts[:20]}'")
# Start with an empty string
cnts_copy = ''
# Iterate over each line of fobj
for line in fobj:
# Add this line to the string `cnts_copy`
cnts_copy += line
# Print the result
print(f"First 20 characters in cnts_copy: '{cnts_copy[:20]}'")
# Close the file
fobj.close()





# Using context managers
# Instead of fobj = open(SRCFILE, mode='r'), use a context manager:
with open(SRCFILE, mode='r') as fobj:
cnts = fobj.read()
# Check if the object is closed inside the manager
print(f'Is the fobj closed inside the manager? {fobj.closed}')
# Notice that we did not close the object when using a context manager
# But after exiting the context manager, the file will automatically close
print(f'Is the fobj closed after we exit the manager? {fobj.closed}')



# Auxiliary function to print the lines of a file
def print_lines(pth):
""" Function to print the lines of a file
Parameters
----------
pth : str
Location of the file
Notes
-----
Each line in the file will be printed as
line number: 'string with the line text'
"""
with open(pth) as fobj:
for i, line in enumerate(fobj):
print(f"line {i}: {line}")
# This will create the file located at `DSTFILE` and write some content to it
with open(DSTFILE, mode='w') as fobj:
fobj.write('This is a line')
# Exiting the context manager will close the file
# We can then print its content
s contents
print_lines(DSTFILE)



with open(DSTFILE, mode='w') as fobj:
fobj.write('This is a line')
fobj.write('This is a another line')
print_lines(DSTFILE)
